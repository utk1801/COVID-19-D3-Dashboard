# -*- coding: utf-8 -*-
"""564-EDA_Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-YxvvTSD3d4VQp-IG5VS0bW3Gs6NCP2v
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import requests,json
import csv

covid_data=pd.read_csv('owid-covid-data_final.csv')

covid_data.location.unique()

import missingno as msno
msno.matrix(covid_data)

covid_data.columns

continent_data=pd.read_csv('countryContinent.csv',encoding='ISO-8859-1')

continent_data[continent_data.iso_code=='USA']

continent_data.rename(columns = {'code_3':'iso_code'}, inplace = True) 
continent_data = continent_data.filter(['iso_code','continent'])
continent_data

pop_data=pd.read_csv("world_population.tsv",sep='\t')

pop_data=pop_data[['id','name','population']]
pop_data

pop_den_data=pd.read_csv('map_data.csv')
pop_den_data=pop_den_data[['iso_code','population','population_density']]

pop_den_data[pop_den_data['iso_code']=='ABW']

covid_data = pd.merge(covid_data,continent_data,  how = "left", on = "iso_code")
# covid_data = pd.merge(covid_data,pop_den_data,  how = "left", on = "iso_code")

covid_data.columns

covid_data=covid_data.drop(columns=['total_tests', 'new_tests',
       'total_tests_per_thousand', 'new_tests_per_thousand', 'tests_units','aged_65_older', 'aged_70_older','extreme_poverty','diabetes_prevalence',
       'female_smokers', 'male_smokers', 'handwashing_facilities',
       'hospital_beds_per_100k'])



covid_data.head()



covid_data.shape

covid_data.date.max()

covid_data.to_csv('timeseries_data_new.csv')

df_temp = covid_data.groupby(['location','continent','iso_code','population','population_density','median_age','gdp_per_capita'])['new_cases_per_million',
      'new_deaths_per_million',
       'new_cases', 'new_deaths'].sum().reset_index()
# df_temp["date"] = pd.to_datetime(df_temp["date"]).dt.strftime('%m/%d/%Y')
df_temp.columns=['location','continent','iso_code','population','population_density','median_age','gdp_per_capita','total_cases_per_million',
        'total_deaths_per_million',
        'Confirmed','Deaths']
df_temp['Confirmed'].fillna(0, inplace=True)
inclWorld=df_temp.sort_values('Confirmed', ascending=False)

df_temp[df_temp['location']=='India']

df_temp['Confirmed']=df_temp['Confirmed'].replace(0,1)
df_temp['Deaths']=df_temp['Deaths'].replace(0,1)

df_temp['Confirmed_log']=np.log(df_temp['Confirmed'])
df_temp['Deaths_log']=np.log(df_temp['Deaths'])

df_temp.isin([np.inf,-np.inf]).sum()

df_temp.to_csv('final_final.csv')

df_temp

top5=pd.read_csv('top5_per_continent.csv')

top5

top_13_country=df_temp.sort_values('Confirmed',ascending=False)[:13]
# top_idx=top_13_country.tolist()
# df_temp.ix[top_idx]
# top_13_country.drop_index(162,126)
top_13_country.drop(top_13_country.loc[top_13_country['location'] =='Peru'].index, inplace=True)
top_13_country.drop(top_13_country.loc[top_13_country['location'] =='Turkey'].index, inplace=True)
top_13_country.drop(top_13_country.loc[top_13_country['location'] =='Iran'].index, inplace=True)

top_13_country.to_csv('top_10_cropped.csv')

top_13_country.sort_values('Deaths',ascending=False)

def top_n(n): 
   top_n=pd.DataFrame()
   top_n=df_temp.groupby(['continent']).apply(lambda x: x.nlargest(n,['Confirmed'])).reset_index(drop=True)
   return top_n

top_5_df=top_n(5)
top_5_df

top_3_df=top_n(3)
top_3_df

top_3_df.to_csv('top3_per_continent.csv')

top_5_df.to_csv('top5_per_continent.csv')

covid_data['']

covid_1 = pd.read_csv("covid_1.csv")
covid_2 = pd.read_csv("covid_2.csv")
covid_3 = pd.read_csv("covid_3.csv")
covid_4 = pd.read_csv("covid_4.csv")
covid_5 = pd.read_csv("covid_5.csv")

new_cov1=covid_1.groupby(['location']).apply(lambda x: x.nlargest(1,['total_cases'])).reset_index(drop=True)
new_cov2=covid_2.groupby(['location']).apply(lambda x: x.nlargest(1,['total_cases'])).reset_index(drop=True)
new_cov3=covid_3.groupby(['location']).apply(lambda x: x.nlargest(1,['total_cases'])).reset_index(drop=True)
new_cov4=covid_4.groupby(['location']).apply(lambda x: x.nlargest(1,['total_cases'])).reset_index(drop=True)
new_cov5=covid_5.groupby(['location']).apply(lambda x: x.nlargest(1,['total_cases'])).reset_index(drop=True)

new_cov5.rename(columns = {'date.1':'day'}, inplace = True)

new_cov5

new_cov5.to_csv("covid_5.csv")